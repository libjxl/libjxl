# Copyright (c) the JPEG XL Project Authors. All rights reserved.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Workflow for building and running tests.

name: Build/Test
on:
  push:
    branches:
      - main
      - v*.*.x
  pull_request:
    types: [opened, reopened, labeled, synchronize]

jobs:
  ubuntu_build:
    name: Ubuntu Build ${{ matrix.name }}
    runs-on: [ubuntu-latest]
    strategy:
      matrix:
        # We have one job per "name" in the matrix. Attributes are set on the
        # specific job names.
        name: [release, debug, asan, msan, scalar]
        include:
          - name: release
            test_in_pr: true
          - name: debug
          # Build scalar-only hwy instructions.
          - name: scalar
            mode: release
            cxxflags: -DHWY_DISABLED_TARGETS=~HWY_SCALAR
          # Disabling optional features to speed up msan build a little bit.
          - name: msan
            cmake_args: >-
              -DJPEGXL_ENABLE_DEVTOOLS=OFF -DJPEGXL_ENABLE_PLUGINS=OFF
              -DJPEGXL_ENABLE_VIEWERS=OFF

    steps:
    - name: Install build deps
      run: |
        sudo apt update
        sudo apt install -y \
          clang-7 \
          cmake \
          doxygen \
          libbrotli-dev \
          libgif-dev \
          libgtest-dev \
          libjpeg-dev \
          libopenexr-dev \
          libpng-dev \
          libwebp-dev \
          ninja-build \
          pkg-config \
        #
        echo "CC=clang-7" >> $GITHUB_ENV
        echo "CXX=clang++-7" >> $GITHUB_ENV
    - name: Checkout the source
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build
      run: |
        mode="${{ matrix.mode }}"
        [[ -n "${mode}" ]] || mode="${{ matrix.name }}"
        ./ci.sh ${mode} -DJPEGXL_FORCE_SYSTEM_BROTLI=ON ${{ matrix.cmake_args }}
      env:
        SKIP_TEST: 1
        CMAKE_CXX_FLAGS: ${{ matrix.cxxflags }}
    - name: Build stats ${{ matrix.name }}
      if: matrix.mode == 'release' || matrix.name == 'release'
      run: |
        tools/build_stats.py --save build/stats.json \
          cjxl djxl libjxl.so libjxl_dec.so
    # Run the tests on push and when requested in pull_request.
    - name: Test ${{ matrix.mode }}
      if: |
        github.event_name == 'push' ||
        (github.event_name == 'pull_request' && (
         matrix.test_in_pr ||
         contains(github.event.pull_request.labels.*.names, 'CI:full')))
      run: |
        if [[ "${{ matrix.name }}" == "debug" ]]; then
          export TEST_STACK_LIMIT=1024
        fi
        ./ci.sh test
